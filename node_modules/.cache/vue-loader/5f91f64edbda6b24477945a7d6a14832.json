{"remainingRequest":"/home/madjid/Bureau/nodejs-uno-game/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/madjid/Bureau/nodejs-uno-game/src/UnoGame.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/madjid/Bureau/nodejs-uno-game/src/UnoGame.vue","mtime":1699356085724},{"path":"/home/madjid/Bureau/nodejs-uno-game/node_modules/cache-loader/dist/cjs.js","mtime":1699356179600},{"path":"/home/madjid/Bureau/nodejs-uno-game/node_modules/vue-loader/lib/index.js","mtime":1699356179232}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}